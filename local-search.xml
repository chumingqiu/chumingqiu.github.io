<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sql必知必会</title>
    <link href="/2023/05/01/sql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2023/05/01/sql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-了解SQL"><a href="#1-了解SQL" class="headerlink" title="1. 了解SQL"></a>1. 了解SQL</h2><h3 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h3><p>数据库是保存有组织的数据的容器（通常是一个文件或一组文件）。</p><h3 id="数据库软件是数据库吗？"><a href="#数据库软件是数据库吗？" class="headerlink" title="数据库软件是数据库吗？"></a>数据库软件是数据库吗？</h3><p>不是。数据库软件应称为数据库管理系统（DBMS）。数据库是通过 DBMS 创建和操纵的容器。</p><h3 id="什么是表？"><a href="#什么是表？" class="headerlink" title="什么是表？"></a>什么是表？</h3><p>表是一种结构化的文件，可用来存储某种特定类型的数据。需要注意的是，存储在表中的数据是<strong>同一种类型</strong>的数据或清单。</p><h3 id="行和列的关系？"><a href="#行和列的关系？" class="headerlink" title="行和列的关系？"></a>行和列的关系？</h3><p>行是表中的一个记录。</p><p>列是表中的一个字段。所有表都是由一个或多个列组成的。每个列具有特定的数据类型，限制该列中存储的数据的种类。</p><h3 id="什么是主键？"><a href="#什么是主键？" class="headerlink" title="什么是主键？"></a>什么是主键？</h3><p>一列（或几列），其值能够唯一标识表中每一行。</p><h3 id="主键的特点？"><a href="#主键的特点？" class="headerlink" title="主键的特点？"></a>主键的特点？</h3><ul><li>任意两行都不具有相同的主键值；</li><li>每一行都必须具有一个主键值（主键列不允许空值 NULL）；</li><li>主键列中的值不允许修改或更新；</li><li>主键值不能重用（如果某行从表中删除，它的主键不能赋给以后的新行）。</li></ul><h3 id="什么是SQL？"><a href="#什么是SQL？" class="headerlink" title="什么是SQL？"></a>什么是SQL？</h3><p>SQL是 Structured Query Language（结构化查询语言）的缩写。SQL 是一种专门用来与数据库沟通的语言。</p><h2 id="2-检索数据"><a href="#2-检索数据" class="headerlink" title="2. 检索数据"></a>2. 检索数据</h2><h3 id="如何检索单个列？"><a href="#如何检索单个列？" class="headerlink" title="如何检索单个列？"></a>如何检索单个列？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><h3 id="SQL语句的语法规范？"><a href="#SQL语句的语法规范？" class="headerlink" title="SQL语句的语法规范？"></a>SQL语句的语法规范？</h3><ul><li>多条 SQL 语句必须以分号（;）分隔，单条 SQL 语句也建议以分号（;）分隔；</li><li>SQL 语句不区分大小写，但建议对 SQL 关键字使用大写，而对列名和表名使用小写。</li><li>在处理 SQL 语句时，其中所有空格都被忽略，建议将 SQL 语句分成多行。</li></ul><h3 id="如何检索多个列？"><a href="#如何检索多个列？" class="headerlink" title="如何检索多个列？"></a>如何检索多个列？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><h3 id="如何检索所有列？"><a href="#如何检索所有列？" class="headerlink" title="如何检索所有列？"></a>如何检索所有列？</h3><p>实际列名的位置使用星号（*）通配符，但不建议这样做，尽量写出所有的列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><h3 id="如何检索不同的值？"><a href="#如何检索不同的值？" class="headerlink" title="如何检索不同的值？"></a>如何检索不同的值？</h3><p>使用 DISTINCT 关键字，<strong>它必须直接放在列名的前面</strong>。</p><p><strong>DISTINCT 关键字作用于所有的列，不仅仅是跟在其后的那一列。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> vend_id                            <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-number">3</span>行<br><span class="hljs-keyword">FROM</span> Products;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> vend_id, prod_price <span class="hljs-keyword">FROM</span> Products; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-number">6</span>行<br><span class="hljs-keyword">SELECT</span> vend_id, prod_price <span class="hljs-keyword">FROM</span> Products;          <span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-number">9</span>行<br></code></pre></td></tr></table></figure><h3 id="怎样限制检索的结果？"><a href="#怎样限制检索的结果？" class="headerlink" title="怎样限制检索的结果？"></a>怎样限制检索的结果？</h3><p>使用 LIMIT 和 OFFSET 分别指定检索的行数和从哪儿开始。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products<br>LIMIT <span class="hljs-number">5</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>逗号之前的值对应 OFFSET，逗号之后的值对应 LIMIT。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products<br>LIMIT <span class="hljs-number">3</span>, <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h3 id="如何使用注释？"><a href="#如何使用注释？" class="headerlink" title="如何使用注释？"></a>如何使用注释？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name <span class="hljs-comment">-- 这是一条注释</span><br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 这是一条注释<br><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* SELECT prod_name, vend_id</span><br><span class="hljs-comment">FROM Products; */</span><br><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><h2 id="3-排序检索数据"><a href="#3-排序检索数据" class="headerlink" title="3. 排序检索数据"></a>3. 排序检索数据</h2><h3 id="如何排序数据？"><a href="#如何排序数据？" class="headerlink" title="如何排序数据？"></a>如何排序数据？</h3><p>为了明确地排序用 SELECT 语句检索出的数据，可使用 ORDER BY 子句。ORDER BY 子句取一个或多个列的名字，据此对输出进行排序。可以通过<strong>非选择列</strong>进行排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br></code></pre></td></tr></table></figure><h3 id="如何按多个列排序？"><a href="#如何按多个列排序？" class="headerlink" title="如何按多个列排序？"></a>如何按多个列排序？</h3><p>要按多个列排序，只须指定这些列名，列名之间用逗号分开即可（就像选择多个列时那样）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price, prod_name;<br></code></pre></td></tr></table></figure><h3 id="如何按列位置排序？"><a href="#如何按列位置排序？" class="headerlink" title="如何按列位置排序？"></a>如何按列位置排序？</h3><p>除了能用列名指出排序顺序外，ORDER BY 还支持按相对列位置进行排序。如果进行排序的列不在 SELECT 清单中，显然不能使用这项技术。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="如何指定排序方向？"><a href="#如何指定排序方向？" class="headerlink" title="如何指定排序方向？"></a>如何指定排序方向？</h3><p>使用DESC关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_price <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>DESC 关键字只应用到直接位于其前面的列名。DESC 关键字只应用到直接位于其前面的列名。</p><h2 id="4-过滤数据"><a href="#4-过滤数据" class="headerlink" title="4. 过滤数据"></a>4. 过滤数据</h2><h3 id="如何使用-WHERE-子句？"><a href="#如何使用-WHERE-子句？" class="headerlink" title="如何使用 WHERE 子句？"></a>如何使用 WHERE 子句？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-operator">=</span> <span class="hljs-number">3.49</span>;<br></code></pre></td></tr></table></figure><h3 id="何时适用引号？"><a href="#何时适用引号？" class="headerlink" title="何时适用引号？"></a>何时适用引号？</h3><p>单引号用来限定字符串。如果将值与字符串类型的列进行比较，就需要限定引号。用来与数值列进行比较的值不用引号。</p><h3 id="如何进行范围值检查？"><a href="#如何进行范围值检查？" class="headerlink" title="如何进行范围值检查？"></a>如何进行范围值检查？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">5</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="如何进行空值检查？"><a href="#如何进行空值检查？" class="headerlink" title="如何进行空值检查？"></a>如何进行空值检查？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> prod_price <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="NULL-和非匹配的联系？"><a href="#NULL-和非匹配的联系？" class="headerlink" title="NULL 和非匹配的联系？"></a>NULL 和非匹配的联系？</h3><p>通过过滤选择不包含指定值的所有行时，你可能希望返回含 NULL 值的行。但是这做不到。<strong>因为 NULL 比较特殊，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。</strong></p><h2 id="5-高级数据过滤"><a href="#5-高级数据过滤" class="headerlink" title="5. 高级数据过滤"></a>5. 高级数据过滤</h2><h3 id="如何使用组合-WHERE-子句？"><a href="#如何使用组合-WHERE-子句？" class="headerlink" title="如何使用组合 WHERE 子句？"></a>如何使用组合 WHERE 子句？</h3><ul><li>AND 是用在 WHERE 子句中的关键字，用来指示检索满足所有给定条件的行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span> <span class="hljs-keyword">AND</span> prod_price <span class="hljs-operator">&lt;=</span> <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><ul><li>OR 是WHERE 子句中使用的关键字，用来表示检索匹配任一给定条件的行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_price, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span> <span class="hljs-keyword">OR</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;BRS01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="如何避免默认求值顺序可能引发的错误（AND-具有更高的优先级顺序）？"><a href="#如何避免默认求值顺序可能引发的错误（AND-具有更高的优先级顺序）？" class="headerlink" title="如何避免默认求值顺序可能引发的错误（AND 具有更高的优先级顺序）？"></a>如何避免默认求值顺序可能引发的错误（AND 具有更高的优先级顺序）？</h3><p>任何时候使用具有 AND 和 OR 操作符的 WHERE 子句，都应该使用<strong>圆括号</strong>明确地分组操作符。</p><h3 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h3><p>IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN 取一组由逗号分隔、括在圆括号中的合法值。<strong>功能与 OR 相当，但更建议使用。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;DLL01&#x27;</span>,<span class="hljs-string">&#x27;BRS01&#x27;</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br></code></pre></td></tr></table></figure><h3 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h3><p>NOT 操作符有且只有一个功能，那就是否定其后所跟的任何条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name;<br></code></pre></td></tr></table></figure><h2 id="6-用通配符进行过滤"><a href="#6-用通配符进行过滤" class="headerlink" title="6. 用通配符进行过滤"></a>6. 用通配符进行过滤</h2><h3 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h3><p>LIKE 指示 DBMS，后跟的搜索模式利用通配符匹配而不是简单的相等匹配进行比较。</p><p><strong>通配符搜索只能用于文本字段（字符串），非文本数据类型字段不能使用通配符搜索。</strong></p><h3 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h3><p>在搜索串中，**%表示任何字符出现任意次数**，%代表搜索模式中给定位置的 0 个、1 个或多个字符。。例如，为了找出所有以词 Fish 起头的产品，可写以下的 SELECT 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Fish%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>需要注意</strong>：</p><ul><li>通配符%看起来像是可以匹配任何东西，但有个例外，这就是 NULL。子句 WHERE prod_name LIKE ‘%’不会匹配产品名称为 NULL 的行。</li><li>子句 WHERE prod_name LIKE ‘F%y’只匹配以 F 开头、以 y 结尾的 prod_name。如果值后面跟空格，则不是以 y 结尾，所以 Fish bean bag toy 就不会检索出来。简单的解决办法是给搜索模式再增加一个%号：’F%y%’还匹配 y 之后的字符（或空格）。更好的解决办法是用函数去掉空格。</li></ul><h3 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_）通配符"></a>下划线（_）通配符</h3><p>下划线的用途与%一样，但它只匹配单个字符，而不是多个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id, prod_name<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__ inch teddy bear&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h3><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul><h2 id="7-创建计算字段"><a href="#7-创建计算字段" class="headerlink" title="7. 创建计算字段"></a>7. 创建计算字段</h2><h3 id="为什么需要使用计算字段？"><a href="#为什么需要使用计算字段？" class="headerlink" title="为什么需要使用计算字段？"></a>为什么需要使用计算字段？</h3><p>存储在数据库表中的数据一般不是应用程序所需要的格式，例如</p><ul><li>需要显示公司名，同时还需要显示公司的地址，但这两个信息存储在不同的表列中；</li><li>城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签打印程序需要把它们作为一个有恰当格式的字段检索出来；</li><li>物品订单表存储物品的价格和数量，不存储每个物品的总价格（用价格乘以数量即可）。但为打印发票，需要物品的总价格；</li><li>需要根据表数据进行诸如总数、平均数的计算。</li></ul><p>在上述每个例子中，存储在表中的数据都不是应用程序所需要的。我们需要直接从数据库中检索出转换、计算或格式化过的数据，而不是检索出数据，然后再在客户端应用程序中重新格式化。</p><p><strong>计算字段并不实际存在于数据库表中。计算字段是运行时在 SELECT 语句内创建的。</strong></p><h3 id="如何拼接字段？"><a href="#如何拼接字段？" class="headerlink" title="如何拼接字段？"></a>如何拼接字段？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> RTRIM(vend_name) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span> RTRIM(vend_country) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">FROM</span> Vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h3 id="如何使用别名？"><a href="#如何使用别名？" class="headerlink" title="如何使用别名？"></a>如何使用别名？</h3><p>别名用 AS 关键字赋予。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> RTRIM(vend_name) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span> RTRIM(vend_country) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> Vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h3 id="如何执行算术计算？"><a href="#如何执行算术计算？" class="headerlink" title="如何执行算术计算？"></a>如何执行算术计算？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> prod_id,<br>quantity,<br>item_price,<br>quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-keyword">FROM</span> OrderItems<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20008</span>;<br></code></pre></td></tr></table></figure><h2 id="8-使用函数处理数据"><a href="#8-使用函数处理数据" class="headerlink" title="8. 使用函数处理数据"></a>8. 使用函数处理数据</h2><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name, <span class="hljs-built_in">UPPER</span>(vend_name) <span class="hljs-keyword">AS</span> vend_name_upcase<br><span class="hljs-keyword">FROM</span> Vendors<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> vend_name;<br></code></pre></td></tr></table></figure><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> order_num<br><span class="hljs-keyword">FROM</span> Orders<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(order_date) <span class="hljs-operator">=</span> <span class="hljs-number">2020</span>;<br></code></pre></td></tr></table></figure><h2 id="9-汇总数据"><a href="#9-汇总数据" class="headerlink" title="9. 汇总数据"></a>9. 汇总数据</h2><h3 id="什么时候需要使用聚集函数？"><a href="#什么时候需要使用聚集函数？" class="headerlink" title="什么时候需要使用聚集函数？"></a>什么时候需要使用聚集函数？</h3><p>我们经常需要汇总数据而不用把它们实际检索出来，为此 SQL 提供了专门的函数。使用这些函数，SQL 查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有：</p><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数）；</li><li>获得表中某些行的和；</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值、平均值。</li></ul><p>上述例子都需要汇总出表中的数据，而不需要查出数据本身。</p><h3 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG()函数"></a>AVG()函数</h3><p>AVG()通过对表中行数计数并计算其列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><p>下面的例子使用 AVG()返回 Products 表中所有产品的平均价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><p>下面的例子返回特定供应商所提供产品的平均价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li><strong>AVG()只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。</strong>为了获得多个列的平均值，必须使用多个 AVG()函数。</li><li><strong>AVG()函数忽略列值为 NULL 的行。</strong></li></ul><h3 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT()函数"></a>COUNT()函数</h3><p>COUNT()函数进行计数。可利用 COUNT()确定表中行的数目或符合特定条件的行的数目。</p><p>COUNT()函数有两种使用方式：</p><ul><li>使用 COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</li><li>使用 COUNT(column)对特定列中具有值的行进行计数，忽略 NULL 值。</li></ul><p>下面的例子返回 Customers 表中顾客的总数，不管行中各列有什么值。计数值在 num_cust 中返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> Customers;<br></code></pre></td></tr></table></figure><p>下面的例子只对具有电子邮件地址的客户计数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(cust_email) <span class="hljs-keyword">AS</span> num_cust<br><span class="hljs-keyword">FROM</span> Customers;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li>如果指定列名，则 COUNT()函数会忽略指定列的值为 NULL 的行，但如果 COUNT()函数中用的是星号（*），则不忽略。</li></ul><h3 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX()函数"></a>MAX()函数</h3><p>MAX()返回指定列中的最大值。MAX()要求指定列名，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(prod_price) <span class="hljs-keyword">AS</span> max_price<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li>MAX()函数忽略列值为 NULL 的行。</li></ul><h3 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN()函数"></a>MIN()函数</h3><p>MIN()的功能正好与 MAX()功能相反，它返回指定列的最小值。与 MAX()一样，MIN()要求指定列名，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(prod_price) <span class="hljs-keyword">AS</span> min_price<br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li>MIN()函数忽略列值为 NULL 的行。</li></ul><h3 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM()函数"></a>SUM()函数</h3><p>SUM()用来返回指定列值的和（总计）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(quantity) <span class="hljs-keyword">AS</span> items_ordered<br><span class="hljs-keyword">FROM</span> OrderItems<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20005</span>;<br></code></pre></td></tr></table></figure><p>需要注意：</p><ul><li>SUM()函数忽略列值为 NULL 的行。</li></ul><h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><p>以上 5 个聚集函数都可以如下使用。</p><ul><li>对所有行执行计算，指定 ALL 参数或不指定参数（因为 ALL 是默认行为）。</li><li>只包含不同的值，指定 DISTINCT 参数。</li></ul><p>下面的例子使用 AVG()函数返回特定供应商提供的产品的平均价格。使用了 DISTINCT 参数，因此平均值只考虑各个不同的价格：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(<span class="hljs-keyword">DISTINCT</span> prod_price) <span class="hljs-keyword">AS</span> avg_price<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;DLL01&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li>如果指定列名，则 DISTINCT 只能用于 COUNT()。<strong>DISTINCT 不能用于 COUNT(*)。</strong>类似地，DISTINCT 必须使用列名，不能用于计算或表达式。</li></ul><h2 id="10-分组数据"><a href="#10-分组数据" class="headerlink" title="10. 分组数据"></a>10. 分组数据</h2><h3 id="为什么使用分组？"><a href="#为什么使用分组？" class="headerlink" title="为什么使用分组？"></a>为什么使用分组？</h3><p>使用分组可以将数据分为多个逻辑组，对每个组进行聚集计算。</p><h3 id="如何创建分组？"><a href="#如何创建分组？" class="headerlink" title="如何创建分组？"></a>如何创建分组？</h3><p>分组是使用 SELECT 语句的 GROUP BY 子句建立的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_id, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num_prods<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> vend_id;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li>GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组。</li><li>如果在 GROUP BY 子句中嵌套了分组，数据将在最后指定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li><li>GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</li><li>大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型（如文本或备注型字段）。</li><li><strong>除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出。</strong></li><li><strong>如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回。如果列中有多行 NULL 值，它们将分为一组。</strong></li><li><strong>GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前。</strong></li></ul><h3 id="如何过滤分组？"><a href="#如何过滤分组？" class="headerlink" title="如何过滤分组？"></a>如何过滤分组？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> Orders<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cust_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h3 id="HAVING-和-WHERE-的区别和联系？"><a href="#HAVING-和-WHERE-的区别和联系？" class="headerlink" title="HAVING 和 WHERE 的区别和联系？"></a>HAVING 和 WHERE 的区别和联系？</h3><p>区别：</p><ul><li>WHERE过滤行，而 HAVING 过滤分组。</li><li>WHERE 在数据分组前进行过滤，HAVING 在数据分组后进行过滤。<strong>WHERE 排除的行不包括在分组中。</strong></li></ul><p>联系：</p><ul><li>HAVING 支持所有 WHERE 操作符</li></ul><h3 id="分组与排序的差别？"><a href="#分组与排序的差别？" class="headerlink" title="分组与排序的差别？"></a>分组与排序的差别？</h3><table><thead><tr><th align="center">ORDER BY</th><th align="center">GROUP BY</th></tr></thead><tbody><tr><td align="center">对产生的输出排序</td><td align="center">对行分组，但输出可能不是分组的顺序</td></tr><tr><td align="center">任意列都可以使用（甚至非选择的列也可以使用）</td><td align="center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td></tr><tr><td align="center">不一定需要</td><td align="center">如果与聚集函数一起使用列（或表达式），则必须使用</td></tr></tbody></table><h3 id="SELECT子句顺序？"><a href="#SELECT子句顺序？" class="headerlink" title="SELECT子句顺序？"></a>SELECT子句顺序？</h3><table><thead><tr><th align="center">子 句</th><th align="center">说 明</th><th align="center">是否必须使用</th></tr></thead><tbody><tr><td align="center">SELECT</td><td align="center">要返回的列或表达式</td><td align="center">是</td></tr><tr><td align="center">FROM</td><td align="center">从中检索数据的表</td><td align="center">仅在从表选择数据时使用</td></tr><tr><td align="center">WHERE</td><td align="center">行级过滤</td><td align="center">否</td></tr><tr><td align="center">GROUP BY</td><td align="center">分组说明</td><td align="center">仅在按组计算聚集时使用</td></tr><tr><td align="center">HAVING</td><td align="center">组级过滤</td><td align="center">否</td></tr><tr><td align="center">ORDER BY</td><td align="center">输出排序顺序</td><td align="center">否</td></tr></tbody></table><h2 id="11-使用子查询"><a href="#11-使用子查询" class="headerlink" title="11. 使用子查询"></a>11. 使用子查询</h2><h3 id="如何利用子查询进行过滤？"><a href="#如何利用子查询进行过滤？" class="headerlink" title="如何利用子查询进行过滤？"></a>如何利用子查询进行过滤？</h3><p>假如需要列出订购物品 RGAN01 的所有顾客，应该怎样检索？下面列出具体的步骤。</p><ol><li>检索包含物品 RGAN01 的所有订单的编号。</li><li>检索具有前一步骤列出的订单编号的所有顾客的 ID。</li><li>检索前一步骤返回的所有顾客 ID 的顾客信息。</li></ol><p>上述每个步骤都可以单独作为一个查询来执行。可以把一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句。也可以使用子查询来把 3 个查询组合成一条语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> cust_id<br>                    <span class="hljs-keyword">FROM</span> Orders<br>                    <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                    <span class="hljs-keyword">FROM</span> OrderItems<br>                   <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>));<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li><strong>作为子查询的 SELECT 语句只能查询单个列。</strong>企图检索多个列将返回错误。</li><li>使用子查询并不总是执行这类数据检索的最有效方法。</li></ul><h3 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h3><p>假如需要显示 Customers 表中每个顾客的订单总数。订单与相应的顾客 ID 存储在 Orders 表中。执行这个操作，要遵循下面的步骤：</p><ol><li>从 Customers 表中检索顾客列表；</li><li>对于检索出的每个顾客，统计其在 Orders 表中的订单数目。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name,<br>   cust_state,<br>        (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>        <span class="hljs-keyword">FROM</span> Orders<br>        <span class="hljs-keyword">WHERE</span> Orders.cust_id <span class="hljs-operator">=</span> Customers.cust_id) <span class="hljs-keyword">AS</span> orders<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name;<br></code></pre></td></tr></table></figure><h2 id="12-联结表"><a href="#12-联结表" class="headerlink" title="12. 联结表"></a>12. 联结表</h2><h3 id="如何创建联结？"><a href="#如何创建联结？" class="headerlink" title="如何创建联结？"></a>如何创建联结？</h3><p>创建联结非常简单，指定要联结的所有表以及关联它们的方式即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Vendors, Products<br><span class="hljs-keyword">WHERE</span> Vendors.vend_id <span class="hljs-operator">=</span> Products.vend_id;<br></code></pre></td></tr></table></figure><p><strong>需要注意：</strong></p><ul><li><strong>要保证所有联结都有 WHERE 子句</strong>，否则 DBMS 将返回比想要的数据多得多的数据。同理，要保证 WHERE 子句的正确性。不正确的过滤条件会导致 DBMS 返回不正确的数据。</li></ul><h3 id="如何使用内联结？"><a href="#如何使用内联结？" class="headerlink" title="如何使用内联结？"></a>如何使用内联结？</h3><p><strong>虽然与上面等值联结返回相同的结果，但更建议使用这种语法。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> vend_name, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Vendors<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Products <span class="hljs-keyword">ON</span> Vendors.vend_id <span class="hljs-operator">=</span> Products.vend_id;<br></code></pre></td></tr></table></figure><h3 id="如何联结多个表？"><a href="#如何联结多个表？" class="headerlink" title="如何联结多个表？"></a>如何联结多个表？</h3><p>首先列出所有表，然后定义表之间的关系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> Customers, Orders, OrderItems<br><span class="hljs-keyword">WHERE</span> Customers.cust_id <span class="hljs-operator">=</span> Orders.cust_id<br><span class="hljs-keyword">AND</span> OrderItems.order_num <span class="hljs-operator">=</span> Orders.order_num<br><span class="hljs-keyword">AND</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>;<br></code></pre></td></tr></table></figure><p>等价于使用子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> cust_id<br>                    <span class="hljs-keyword">FROM</span> Orders<br>                    <span class="hljs-keyword">WHERE</span> order_num <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> order_num<br>                                        <span class="hljs-keyword">FROM</span> OrderItems<br>                                        <span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="13-创建高级联结"><a href="#13-创建高级联结" class="headerlink" title="13. 创建高级联结"></a>13. 创建高级联结</h2><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><p>假如要给与 Jim Jones 同一公司的所有顾客发送一封信件。这个查询要求首先找出 Jim Jones 工作的公司，然后找出在该公司工作的顾客。下面是解决此问题的一种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_id, cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> cust_name<br>                   <span class="hljs-keyword">FROM</span> Customers<br>                   <span class="hljs-keyword">WHERE</span> cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jim Jones&#x27;</span>);<br></code></pre></td></tr></table></figure><p>使用联结的相同查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact<br><span class="hljs-keyword">FROM</span> Customers <span class="hljs-keyword">AS</span> c1, Customers <span class="hljs-keyword">AS</span> c2<br><span class="hljs-keyword">WHERE</span> c1.cust_name <span class="hljs-operator">=</span> c2.cust_name<br><span class="hljs-keyword">AND</span> c2.cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jim Jones&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><p>无论何时对表进行联结，应该至少有一列不止出现在一个表中（被联结的列）。标准的联结（前一课中介绍的内联结）返回所有数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。</p><p>自然联结要求你只能选择那些唯一的列，一般通过对一个表使用通配符（SELECT *），而对其他表的列使用明确的子集来完成。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> C.<span class="hljs-operator">*</span>, O.order_num, O.order_date,<br>OI.prod_id, OI.quantity, OI.item_price<br><span class="hljs-keyword">FROM</span> Customers <span class="hljs-keyword">AS</span> C, Orders <span class="hljs-keyword">AS</span> O,<br>OrderItems <span class="hljs-keyword">AS</span> OI<br><span class="hljs-keyword">WHERE</span> C.cust_id <span class="hljs-operator">=</span> O.cust_id<br><span class="hljs-keyword">AND</span> OI.order_num <span class="hljs-operator">=</span> O.order_num<br><span class="hljs-keyword">AND</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>;<br></code></pre></td></tr></table></figure><p>事实上，我们迄今为止建立的每个内联结都是自然联结，很可能永远都不会用到不是自然联结的内联结。</p><h3 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h3><p>许多联结将一个表中的行与另一个表中的行相关联，但有时候需要包含没有关联行的那些行。例如，可能需要使用联结完成以下工作：</p><ul><li>对每个顾客下的订单进行计数，包括那些至今尚未下订单的顾客；</li><li>列出所有产品以及订购数量，包括没有人订购的产品；</li><li>计算平均销售规模，包括那些至今尚未下订单的顾客。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Customers.cust_id, Orders.order_num<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> Orders <span class="hljs-keyword">ON</span> Customers.cust_id <span class="hljs-operator">=</span> Orders.cust_id;<br></code></pre></td></tr></table></figure><h3 id="使用带聚集函数的联结"><a href="#使用带聚集函数的联结" class="headerlink" title="使用带聚集函数的联结"></a>使用带聚集函数的联结</h3><p>要检索所有顾客及每个顾客所下的订单数，下面的代码使用 COUNT()函数完成此工作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Customers.cust_id,<br><span class="hljs-built_in">COUNT</span>(Orders.order_num) <span class="hljs-keyword">AS</span> num_ord<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Orders <span class="hljs-keyword">ON</span> Customers.cust_id <span class="hljs-operator">=</span> Orders.cust_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Customers.cust_id;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Customers.cust_id,<br><span class="hljs-built_in">COUNT</span>(Orders.order_num) <span class="hljs-keyword">AS</span> num_ord<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> Orders <span class="hljs-keyword">ON</span> Customers.cust_id <span class="hljs-operator">=</span> Orders.cust_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Customers.cust_id;<br></code></pre></td></tr></table></figure><h2 id="14-组合查询"><a href="#14-组合查询" class="headerlink" title="14. 组合查询"></a>14. 组合查询</h2><h3 id="什么时候需要使用组合查询？"><a href="#什么时候需要使用组合查询？" class="headerlink" title="什么时候需要使用组合查询？"></a>什么时候需要使用组合查询？</h3><p>主要有两种情况需要使用组合查询：</p><ul><li>在一个查询中从不同的表返回结构数据；</li><li>对一个表执行多个查询，按一个查询返回数据。</li></ul><h3 id="如何创建组合查询？"><a href="#如何创建组合查询？" class="headerlink" title="如何创建组合查询？"></a>如何创建组合查询？</h3><p>可用 UNION 操作符来组合数条 SQL 查询。利用 UNION，可给出多条SELECT 语句，将它们的结果组合成一个结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="使用UNION的规则？"><a href="#使用UNION的规则？" class="headerlink" title="使用UNION的规则？"></a>使用UNION的规则？</h3><ul><li>UNION 必须由两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔（因此，如果组合四条 SELECT 语句，将要使用三个 UNION 关键字）。</li><li>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过，各个列不需要以相同的次序列出）。</li><li>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含转换的类型（例如，不同的数值类型或不同的日期类型）。</li></ul><h3 id="如何包含或取消重复的行？"><a href="#如何包含或取消重复的行？" class="headerlink" title="如何包含或取消重复的行？"></a>如何包含或取消重复的行？</h3><p>UNION 从查询结果集中自动去除了重复的行；换句话说，它的行为与一条 SELECT 语句中使用多个 WHERE 子句条件一样。</p><p>事实上，如果想返回所有的匹配行，可使用 UNION ALL 而不是 UNION。</p><h3 id="如何对组合查询结果排序？"><a href="#如何对组合查询结果排序？" class="headerlink" title="如何对组合查询结果排序？"></a>如何对组合查询结果排序？</h3><p>SELECT 语句的输出用 ORDER BY 子句排序。在用 UNION 组合查询时，只能使用一条 ORDER BY 子句，它必须位于最后一条 SELECT 语句之后。对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条 ORDER BY 子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_state <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;MI&#x27;</span>)<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, cust_email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fun4All&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> cust_name, cust_contact;<br></code></pre></td></tr></table></figure><h2 id="15-插入数据"><a href="#15-插入数据" class="headerlink" title="15. 插入数据"></a>15. 插入数据</h2><h3 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h3><p>顾名思义，INSERT 用来将行插入（或添加）到数据库表。插入有几种方式：</p><ul><li>插入完整的行；</li><li>插入行的一部分；</li><li>插入某些查询的结果。</li></ul><h3 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Customers(cust_id,<br>                        cust_name,<br>                        cust_address,<br>                        cust_city,<br>                        cust_state,<br>                        cust_zip,<br>                        cust_country,<br>                        cust_contact,<br>                        cust_email)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1000000006</span>,<br>        <span class="hljs-string">&#x27;Toy Land&#x27;</span>,<br>        <span class="hljs-string">&#x27;123 Any Street&#x27;</span>,<br>        <span class="hljs-string">&#x27;New York&#x27;</span>,<br>        <span class="hljs-string">&#x27;NY&#x27;</span>,<br>        <span class="hljs-string">&#x27;11111&#x27;</span>,<br>        <span class="hljs-string">&#x27;USA&#x27;</span>,<br>        <span class="hljs-keyword">NULL</span>,<br>        <span class="hljs-keyword">NULL</span>);<br></code></pre></td></tr></table></figure><h3 id="插入部分行"><a href="#插入部分行" class="headerlink" title="插入部分行"></a>插入部分行</h3><p>正如所述，使用 INSERT 的推荐方法是明确给出表的列名。使用这种语法，还可以省略列，这表示可以只给某些列提供值，给其他列不提供值。</p><p>如果表的定义允许，则可以在 INSERT 操作中省略某些列。省略的列必须满足以下某个条件。</p><ul><li>该列定义为允许 NULL 值（无值或空值）。</li><li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li></ul><h3 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h3><p>假如想把另一表中的顾客列合并到 Customers 表中，不需要每次读取一行再将它用 INSERT 插入，可以如下进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Customers(cust_id,<br>                        cust_contact,<br>                        cust_email,<br>                        cust_name,<br>                        cust_address,<br>                        cust_city,<br>                        cust_state,<br>                        cust_zip,<br>                        cust_country)<br><span class="hljs-keyword">SELECT</span> cust_id,<br>        cust_contact,<br>        cust_email,<br>        cust_name,<br>        cust_address,<br>        cust_city,<br>        cust_state,<br>        cust_zip,<br>        cust_country<br><span class="hljs-keyword">FROM</span> CustNew;<br></code></pre></td></tr></table></figure><p><strong>INSERT SELECT 中 SELECT 语句可以包含 WHERE 子句，以过滤插入的数据。</strong></p><h3 id="从一个表复制到另一个表"><a href="#从一个表复制到另一个表" class="headerlink" title="从一个表复制到另一个表"></a>从一个表复制到另一个表</h3><p>与 INSERT SELECT 将数据添加到一个已经存在的表不同，CREATE SELECT 将数据复制到一个新表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> CustCopy <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Customers;<br></code></pre></td></tr></table></figure><h2 id="16-更新和删除数据"><a href="#16-更新和删除数据" class="headerlink" title="16. 更新和删除数据"></a>16. 更新和删除数据</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新（修改）表中的数据，可以使用 UPDATE 语句。有两种使用 UPDATE 的方式：</p><ul><li>更新表中的特定行；</li><li>更新表中的所有行。</li></ul><p>基本的 UPDATE 语句由三部分组成，分别是：</p><ul><li>要更新的表；</li><li>列名和它们的新值；</li><li>确定要更新哪些行的过滤条件。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Customers<br><span class="hljs-keyword">SET</span> cust_contact <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sam Roberts&#x27;</span>,<br>    cust_email <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;sam@toyland.com&#x27;</span><br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-number">1000000006</span>;<br></code></pre></td></tr></table></figure><p>要删除某个列的值，可设置它为 NULL（假如表定义允许 NULL 值）。如下进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Customers<br><span class="hljs-keyword">SET</span> cust_email <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-number">1000000005</span>;<br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>从一个表中删除（去掉）数据，使用 DELETE 语句。有两种使用 DELETE 的方式：</p><ul><li>从表中删除特定的行；</li><li>从表中删除所有行。</li></ul><p>下面的语句从 Customers 表中删除一行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_id <span class="hljs-operator">=</span> <span class="hljs-number">1000000006</span>;<br></code></pre></td></tr></table></figure><p><strong>DELETE 不需要列名或通配符。DELETE 删除整行而不是删除列。要删除指定的列，请使用 UPDATE 语句。</strong></p><p>需要注意：</p><ul><li>DELETE 语句从表中删除行，甚至是删除表中所有行。但是，DELETE 不删除表本身。</li></ul><h2 id="17-创建和操纵表"><a href="#17-创建和操纵表" class="headerlink" title="17. 创建和操纵表"></a>17. 创建和操纵表</h2><h3 id="如何创建表？"><a href="#如何创建表？" class="headerlink" title="如何创建表？"></a>如何创建表？</h3><p>利用 CREATE TABLE 创建表，必须给出下列信息：</p><ul><li>新表的名字，在关键字 CREATE TABLE 之后给出；</li><li>表列的名字和定义，用逗号分隔；</li><li>有的 DBMS 还要求指定表的位置。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Products<br>(<br>prod_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>vend_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>prod_name <span class="hljs-type">CHAR</span>(<span class="hljs-number">254</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>prod_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>prod_desc <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><h3 id="如何指定默认值？"><a href="#如何指定默认值？" class="headerlink" title="如何指定默认值？"></a>如何指定默认值？</h3><p>默认值在 CREATE TABLE 语句的列定义中用关键字 DEFAULT 指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> OrderItems<br>(<br>order_num <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>order_item <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>prod_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>quantity <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>item_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><h3 id="如何更新表？"><a href="#如何更新表？" class="headerlink" title="如何更新表？"></a>如何更新表？</h3><p>更新表定义，可以使用 ALTER TABLE 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Vendors<br><span class="hljs-keyword">ADD</span> vend_phone <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h3 id="如何删除表？"><a href="#如何删除表？" class="headerlink" title="如何删除表？"></a>如何删除表？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> CustCopy;<br></code></pre></td></tr></table></figure><h2 id="18-使用视图"><a href="#18-使用视图" class="headerlink" title="18. 使用视图"></a>18. 使用视图</h2><h3 id="什么是视图？"><a href="#什么是视图？" class="headerlink" title="什么是视图？"></a>什么是视图？</h3><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><h3 id="为什么使用视图？"><a href="#为什么使用视图？" class="headerlink" title="为什么使用视图？"></a>为什么使用视图？</h3><ul><li>重用 SQL 语句。</li><li>简化复杂的 SQL 操作。在编写查询后，可以方便地重用它而不必知道其基本查询细节。</li><li>使用表的一部分而不是整个表。</li><li>保护数据。可以授予用户访问表的特定部分的权限，而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>创建视图之后，可以用与表基本相同的方式使用它们。可以对视图执行 SELECT 操作，过滤和排序数据，将视图联结到其他视图或表，甚至添加和更新数据。</p><p><strong>重要的是，要知道视图仅仅是用来查看存储在别处数据的一种设施。视图本身不包含数据，因此返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变过的数据。</strong></p><h3 id="如何利用视图简化复杂的联结？"><a href="#如何利用视图简化复杂的联结？" class="headerlink" title="如何利用视图简化复杂的联结？"></a>如何利用视图简化复杂的联结？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> ProductCustomers <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_name, cust_contact, prod_id<br><span class="hljs-keyword">FROM</span> Customers, Orders, OrderItems<br><span class="hljs-keyword">WHERE</span> Customers.cust_id <span class="hljs-operator">=</span> Orders.cust_id<br><span class="hljs-keyword">AND</span> OrderItems.order_num <span class="hljs-operator">=</span> Orders.order_num;<br></code></pre></td></tr></table></figure><p>检索订购了产品 RGAN01 的顾客，可如下进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> cust_name, cust_contact<br><span class="hljs-keyword">FROM</span> ProductCustomers<br><span class="hljs-keyword">WHERE</span> prod_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;RGAN01&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="如何用视图重新格式化检索出的数据？"><a href="#如何用视图重新格式化检索出的数据？" class="headerlink" title="如何用视图重新格式化检索出的数据？"></a>如何用视图重新格式化检索出的数据？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> VendorLocations <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> RTRIM(vend_name) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span> RTRIM(vend_country) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">AS</span> vend_title<br><span class="hljs-keyword">FROM</span> Vendors;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> VendorLocations;<br></code></pre></td></tr></table></figure><h3 id="如何用视图过滤不想要的数据？"><a href="#如何用视图过滤不想要的数据？" class="headerlink" title="如何用视图过滤不想要的数据？"></a>如何用视图过滤不想要的数据？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CustomerEMailList <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cust_id, cust_name, cust_email<br><span class="hljs-keyword">FROM</span> Customers<br><span class="hljs-keyword">WHERE</span> cust_email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> CustomerEMailList;<br></code></pre></td></tr></table></figure><h3 id="使用视图与计算字段"><a href="#使用视图与计算字段" class="headerlink" title="使用视图与计算字段"></a>使用视图与计算字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> OrderItemsExpanded <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> order_num,<br>        prod_id,<br>        quantity,<br>        item_price,<br>        quantity<span class="hljs-operator">*</span>item_price <span class="hljs-keyword">AS</span> expanded_price<br><span class="hljs-keyword">FROM</span> OrderItems<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> OrderItemsExpanded<br><span class="hljs-keyword">WHERE</span> order_num <span class="hljs-operator">=</span> <span class="hljs-number">20008</span>;<br></code></pre></td></tr></table></figure><h2 id="19-使用存储过程"><a href="#19-使用存储过程" class="headerlink" title="19. 使用存储过程"></a>19. 使用存储过程</h2><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>简单来说，存储过程就是为以后使用而保存的一条或多条 SQL 语句。可将其视为批文件，虽然它们的作用不仅限于批处理。</p><h3 id="为什么要使用存储过程"><a href="#为什么要使用存储过程" class="headerlink" title="为什么要使用存储过程"></a>为什么要使用存储过程</h3><ul><li>通过把处理封装在一个易用的单元中，可以简化复杂的操作。</li><li>由于不要求反复建立一系列处理步骤，因而保证了数据的一致性。如果所有开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的。</li><li>上一点的延伸就是防止错误。需要执行的步骤越多，出错的可能性就越大。防止错误保证了数据的一致性。</li><li>简化对变动的管理。如果表名、列名或业务逻辑（或别的内容）有变化，那么只需要更改存储过程的代码。使用它的人员甚至不需要知道这些变化。</li><li>上一点的延伸就是安全性。通过存储过程限制对基础数据的访问，减少了数据讹误（无意识的或别的原因所导致的数据讹误）的机会。</li><li>因为存储过程通常以编译过的形式存储，所以 DBMS 处理命令所需的工作量少，提高了性能。</li></ul><p>换句话说，使用存储过程有三个主要的好处，即<strong>简单、安全、高性能</strong>。</p><h3 id="如何执行存储过程？"><a href="#如何执行存储过程？" class="headerlink" title="如何执行存储过程？"></a>如何执行存储过程？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXECUTE</span> AddNewProduct(<span class="hljs-string">&#x27;JTS01&#x27;</span>,<br><span class="hljs-string">&#x27;Stuffed Eiffel Tower&#x27;</span>,<br><span class="hljs-number">6.49</span>,<br><span class="hljs-string">&#x27;Plush stuffed toy with the text La Tour Eiffel in red white and blue&#x27;</span>);<br></code></pre></td></tr></table></figure><p>以下是存储过程所完成的工作：</p><ul><li>验证传递的数据，保证所有 4 个参数都有值；</li><li>生成用作主键的唯一 ID；</li><li>将新产品插入 Products 表，在合适的列中存储生成的主键和传递的数据。</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/../img/sql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/image-20230505100604897.png" alt="image-20230505100604897"></h3>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp开发环境配置</title>
    <link href="/2023/05/01/cpp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/05/01/cpp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Visual文件目录"><a href="#Visual文件目录" class="headerlink" title="Visual文件目录"></a>Visual文件目录</h1><p>Output Directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">(SolutionDir)bin\$(Platform)\$(Configuration)\</span><br></code></pre></td></tr></table></figure><p>Intermediate Directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">(SolutionDir)bin\intermediates\$(Platform)\$(Configuration)\</span><br></code></pre></td></tr></table></figure><h1 id="GCC-编译"><a href="#GCC-编译" class="headerlink" title="GCC 编译"></a>GCC 编译</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -o code code.cpp -pedantic-errors -Wall -Weffc++ -Wextra -Wsign-conversion -Werror -std=c++20<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
